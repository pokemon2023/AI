"""Q1. Write a Python program to implement Mini-Max Algorithm"""
import math

def minimax(curDepth, nodeIndex, maxTurn, scores, targetDepth):
    # Base case: targetDepth reached
    if curDepth == targetDepth:
        return scores[nodeIndex]

    if maxTurn:
        return max(
            minimax(curDepth + 1, nodeIndex * 2, False, scores, targetDepth),
            minimax(curDepth + 1, nodeIndex * 2 + 1, False, scores, targetDepth)
        )
    else:
        return min(
            minimax(curDepth + 1, nodeIndex * 2, True, scores, targetDepth),
            minimax(curDepth + 1, nodeIndex * 2 + 1, True, scores, targetDepth)
        )

# Driver code
scores = [3, 5, 2, 9, 12, 5, 23, 23]
treeDepth = math.log(len(scores), 2)
print("The optimal value is:", end=" ")
print(minimax(0, 0, True, scores, treeDepth))

O.p:

The optimal value is: 12

_________________________________________________

"""Q2 Write a Python program to simulate 8-Queens problem."""
# Function to print the chessboard with queens
def print_chessboard(chessboard):
    for row in chessboard:
        print(" ".join(row))

# Function to check if it's safe to place a queen at the given position
def is_safe(chessboard, row, col, n):
    # Check the column
    for i in range(row):
        if chessboard[i][col] == 'Q':
            return False

    # Check the upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if chessboard[i][j] == 'Q':
            return False

    # Check the upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if chessboard[i][j] == 'Q':
            return False

    return True

# Recursive function to solve the N-Queens problem using forward checking
def solve_nqueens(chessboard, row, n):
    if row >= n:
        return True  # All queens are placed

    for col in range(n):
        if is_safe(chessboard, row, col, n):
            chessboard[row][col] = 'Q'  # Place a queen

            if solve_nqueens(chessboard, row + 1, n):
                return True

            chessboard[row][col] = '.'  # If placing a queen doesn't lead to a solution, backtrack

    return False  # No solution exists

# Main function to perform N-Queens puzzle with forward checking
def main():
    n = 8
    chessboard = [['.' for _ in range(n)] for _ in range(n)]

    print("N-Queens Puzzle using Forward Checking:")
    if solve_nqueens(chessboard, 0, n):
        print("\nSolution to the N-Queens Puzzle:")
        print_chessboard(chessboard)
    else:
        print("No solution found.")

if __name__ == '__main__':
    main()

O.p:

N-Queens Puzzle using Forward Checking:

Solution to the N-Queens Puzzle:
Q . . . . . . .
. . . . Q . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .