"""Q1 Write a python program to generate Calendar for the given month and year?."""
import calendar

def generate_calendar(year, month):
    # Text calendar
    cal_text = calendar.month(year, month)
    print(f"Calendar for {calendar.month_name[month]} {year}:\n")
    print(cal_text)

    # HTML calendar (optional)
    cal_html = calendar.HTMLCalendar().formatmonth(year, month)
    with open("calendar.html", "w") as html_file:
        html_file.write(cal_html)
    print("HTML calendar saved to 'calendar.html'.")

# Example usage:
year = int(input("Enter the year: "))
month = int(input("Enter the month (1-12): "))

generate_calendar(year, month)

O.p:

Enter the year: 2023
Enter the month (1-12): 12
Calendar for December 2023:

   December 2023
Mo Tu We Th Fr Sa Su
             1  2  3
 4  5  6  7  8  9 10
11 12 13 14 15 16 17
18 19 20 21 22 23 24
25 26 27 28 29 30 31

HTML calendar saved to 'calendar.html'.

___________________________________________________

"""Q2 Write a Python program to simulate 4-Queens problem."""
# Function to print the chessboard with queens
def print_chessboard(chessboard):
    for row in chessboard:
        print(" ".join(row))

# Function to check if it's safe to place a queen at the given position
def is_safe(chessboard, row, col, n):
    # Check the column
    for i in range(row):
        if chessboard[i][col] == 'Q':
            return False

    # Check the upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if chessboard[i][j] == 'Q':
            return False

    # Check the upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if chessboard[i][j] == 'Q':
            return False

    return True

# Recursive function to solve the N-Queens problem using forward checking
def solve_nqueens(chessboard, row, n):
    if row >= n:
        return True  # All queens are placed

    for col in range(n):
        if is_safe(chessboard, row, col, n):
            chessboard[row][col] = 'Q'  # Place a queen

            if solve_nqueens(chessboard, row + 1, n):
                return True

            chessboard[row][col] = '.'  # If placing a queen doesn't lead to a solution, backtrack

    return False  # No solution exists

# Main function to perform N-Queens puzzle with forward checking
def main():
    n = 4
    chessboard = [['.' for _ in range(n)] for _ in range(n)]

    print("N-Queens Puzzle using Forward Checking:")
    if solve_nqueens(chessboard, 0, n):
        print("\nSolution to the N-Queens Puzzle:")
        print_chessboard(chessboard)
    else:
        print("No solution found.")

if __name__ == '__main__':
    main()

O.p:

N-Queens Puzzle using Forward Checking:
Solution to the N-Queens Puzzle:
. Q . .
. . . Q
Q . . .
. . Q .
 