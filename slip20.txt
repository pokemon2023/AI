'''Q.1) Build a bot which provides all the information related to you in college'''
class CollegeInfoBot:
    def __init__(self):
        self.college_name = "Sample University"
        self.bot_name = "CollegeInfoBot"
        self.my_name = "Sample Bot"

    def get_response(self, user_input):
        user_input = user_input.lower()

        if "college" in user_input:
            return f"I am affiliated with {self.college_name}."
        elif "identity" in user_input or "who are you" in user_input:
            return f"I am {self.bot_name}, your college information bot."
        elif "your name" in user_input:
            return f"I am named {self.my_name}."
        else:
            return "I'm sorry, I don't understand that question."

# Bot interaction loop
college_bot = CollegeInfoBot()
print("Ask me about the college or my identity. Type 'exit' to end.")

while True:
    user_input = input("You: ")
    if user_input.lower() == 'exit':
        break

    response = college_bot.get_response(user_input)
    print(f"{college_bot.bot_name}: {response}")

O.p:

Ask me about the college or my identity. Type 'exit' to end.
You: exit

________________________________________________________________

'''Q.2) Write a Python program to implement Mini-Max Algorithm.'''

board = ["-", "-", "-",
"-", "-", "-",
"-", "-", "-"]
# Define a function to print the game board
def print_board():
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5])
    print(board[6] + " | " + board[7] + " | " + board[8])
# Define a function to print the game board
def print_board():
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5])
    print(board[6] + " | " + board[7] + " | " + board[8])
# Define a function to handle a player&#39;s turn
def take_turn(player):
    print(player + "s turn.")
    position = input("Choose a position from 1-9: ")
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
            position = input("Invalid input. Choose a position from 1-9: ")
    position = int(position) - 1
    while board[position] != "-":
            position = int(input("Position already taken. Choose a different position: ")) - 1
    board[position] = player
    print_board()
# Define a function to check if the game is over
def check_game_over():
    # Check for a win
    if (board[0] == board[1] == board[2] != "-") or \
    (board[3] == board[4] == board[5] != "-") or \
    (board[6] == board[7] == board[8] != "-") or \
    (board[0] == board[3] == board[6] != "-") or \
    (board[1] == board[4] == board[7] != "-") or \
    (board[2] == board[5] == board[8] != "-") or \
    (board[0] == board[4] == board[8] != "-") or \
    (board[2] == board[4] == board[6] != "-"):
        return "win"
    # Check for a tie
    elif "-" not in board:
        return "tie"
    # Game is not over
    else:
        return "play"
# Define the main game loop
def play_game():
    print_board()
    current_player = "X"
    game_over = False
    while not game_over:
        take_turn(current_player)
        game_result = check_game_over()
        if game_result == "win":
                print(current_player + " wins!")
                game_over = True
        elif game_result == "tie":
                print("Its a tie!")
                game_over = True
        else:
                # Switch to the other player
                current_player = "O" if current_player == "X" else "X"
# Start the game
play_game()

O.p:

- | - | -
- | - | -
- | - | -
Xs turn.
 