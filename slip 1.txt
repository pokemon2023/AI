#Q.1) Python program that demonstrates the hill climbing algorithm to find the maximum of a mathematical function.(For example f(x) = -x^2 + 4x)
def f(x):
    return -x**2 + 4*x

def hill_climbing(max_iterations=100, step_size=0.1):
    current_x = 0.0

    for _ in range(max_iterations):
        current_value = f(current_x)
        next_x = current_x + step_size
        next_value = f(next_x)

        if next_value > current_value:
            current_x = next_x
        else:
            break

    return current_x, f(current_x)

# Run the hill climbing algorithm
max_x, max_value = hill_climbing()

# Print the result
print("Maximum value found at x =", max_x)
print("Maximum function value =", max_value)
o/p
Maximum value found at x = 2.0000000000000004
Maximum function value = 4.0

______________________________________________________________________
#Q.2) Write a Python program to implement Depth First Search algorithm. Refer the following graph as an Input for the program. [Initial node=1,Goal node=8]
graph = {
    1: [2, 3],
    2: [4,5,1],
    3: [6,7,1],
    4: [8,2],
    5: [8,2],
    6: [8,6],
    7: [8,7],
    8: [4,5,6,7]
}

def dfs(current, goal, visited=None, path=None):
    if visited is None:
        visited = set()
    if path is None:
        path = []

    visited.add(current)
    path.append(current)

    if current == goal:
        return path

    for neighbor in graph[current]:
        if neighbor not in visited:
            new_path = dfs(neighbor, goal, visited, path)
            if new_path:
                return new_path

    path.pop()
    return None

# Specify initial and goal nodes
initial_node = 1
goal_node = 8

# Run DFS
result_path = dfs(initial_node, goal_node)

# Print the result
if result_path:
    print(f"Path from {initial_node} to {goal_node}: {result_path}")
else:
    print(f"No path found from {initial_node} to {goal_node}")
    
0/p:

Path from 1 to 8: [1, 2, 4, 8]
 
 