""'Q.1)Write a Program to Implement Monkey Banana Problem using Python

class MonkeyBananaProblem:
    def __init__(self, chair, banana):
        self.chair = chair
        self.banana = banana

    def actions(self, state):
        return ['up', 'down', 'left', 'right', 'use_chair']

    def result(self, state, action):
        return state if action != 'use_chair' else self.banana

    def goal_test(self, state):
        return state == self.banana


def depth_first_search(problem, state, path=[]):
    path = path + [state]
    return path if problem.goal_test(state) else next((
        depth_first_search(problem, problem.result(state, action), path)
        for action in problem.actions(state) if problem.result(state, action) not in path),
        None)


if __name__ == "__main__":
    problem = MonkeyBananaProblem((1, 1), (3, 3))
    initial_state = (0, 0)

    solution = depth_first_search(problem, initial_state)

    print("Solution found:" if solution else "No solution found.")
    print(solution if solution else [])

O.p:

Solution found:
[(0, 0), (3, 3)]

_____________________________________________________


""'Q.2) Write a program to implement Iterative Deepening DFS algorithm. [ Goal Node =G]

#Left to right

def dfs(graph, start):
    visited = set()
    stack = [start]

    while stack:
        node = stack.pop()
        if node not in visited:
            print(node, end=' ')
            visited.add(node)
            stack.extend(graph[node][::-1])

def accept_graph():
    graph = {}
    edges = int(input("Enter number edges: "))

    for _ in range(edges):
        edge = input("Enter an edge (Format: node1 node2): ").split()
        node1, node2 = edge[0], edge[1]

        if node1 not in graph:
            graph[node1] = []
        if node2 not in graph:
            graph[node2] = []

        graph[node1].append(node2)
        graph[node2].append(node1)

    return graph

graph = accept_graph()
start = input("Enter start node: ")

print("DFS Traversal (Left to Right):")
dfs(graph, start)
 