""'Q.1) Write a python program to sort the sentence in alphabetical order?

sentence = input("enter a sentence")
sorted_sentence = ' '.join(sorted(sentence.split()))

print("Sorted Sentence:", sorted_sentence)

O.p:

enter a sentenceabc kjh mnj agh
Sorted Sentence: abc agh kjh mnj

_________________________________________
# Q.2) Write a Python program to simulate n-Queens problem.

def print_chessboard(chessboard):
    for row in chessboard:
        print(" ".join(row))
def is_safe(chessboard, row, col, n):
    for i in range(row):
        if chessboard[i][col] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if chessboard[i][j] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if chessboard[i][j] == 'Q':
            return False
    return True
def solve_nqueens(chessboard, row, n):
    if row >= n:
        return True  # All queens are placed
    for col in range(n):
        if is_safe(chessboard, row, col, n):
            chessboard[row][col] = 'Q'  # Place a queen

            if solve_nqueens(chessboard, row + 1, n):
                return True

            chessboard[row][col] = '.'  # If placing a queen doesn't lead to a solution, backtrack
    return False  # No solution exists
def main():
    n = 4
    chessboard = [['.' for _ in range(n)] for _ in range(n)]
    print("N-Queens Puzzle using Forward Checking:")
    if solve_nqueens(chessboard, 0, n):
        print("\nSolution to the N-Queens Puzzle:")
        print_chessboard(chessboard)
    else:
        print("No solution found.")
if __name__ == '__main__':
    main()
N-Queens Puzzle using Forward Checking:

o.p:

Solution to the N-Queens Puzzle:
. Q . .
. . . Q
Q . . .
. . Q . 